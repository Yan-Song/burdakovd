Prelude> let chain = 0:1: map (\n -> if even n then 1+chain!!(div n 2) else 1+ch
ain!!(3 * n + 1)) [2..]

def f(x):
   if x==1: return 1
   if x in d: return d[x]
   d[x] = 1 + (f(x/2) if (x%2==0) else f(3 * x + 1))
   return d[x]

   Prelude> let ts = [div (x * (x+1)) 2 | x <- [1..]]
Prelude> take 10 ts
[1,3,6,10,15,21,28,36,45,55]
Prelude> let ndivs x = sum (map (\y -> if mod x y == 0 then (if y * y == x then
1 else 2) else 0) (takeWhile (\y -> y * y <= x) [1..x]))

let divsl x = (map (\y -> if mod x y == 0 then (if y * y == x then (y:) else ((y:).((div x y):))) else id) (takeWhile (\y -> y * y <= x) [1..x]))

let divs x = foldr id [] (divsl x)

let abu x = sum(divs x) > 2 * x

let abs = filter abu [1..28123]
let ss = sort (filter (<=28123) [x+y | x <- abs, y <- abs])

Prelude>

 head $ filter ((>5).ndivs) ts
 


def itoa(n):
  if n== 1000: return "one thousand"
  if n >= 100:
    if n % 100 == 0:
      return itoa(n / 100) + " hundred" + ("" if n / 100 == 1 else "")
    else:
      return itoa(n / 100) + " hundred" + ("" if n / 100 == 1 else "") + " and " + itoa(n % 100)
  if n < 20:
    return ["one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"][n-1]
  else:
    s = ["twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"][n / 10 - 2]
    if n % 10 > 0:
      s = s + "-" + itoa(n % 10)
    return s


2 1 -3            1
1 -1 -2           4
0 3 1            -7


2  1 -3  1
0 -3 -1  7
0  3  1 -7


2  1 -3  1
0 -3 -1  7
0  3  1 -7


2  1 -3  1
0 -3 -1  7
0  0  0  0

1 0 1
1 0 2


1 0
1 0


1 1
1 2

